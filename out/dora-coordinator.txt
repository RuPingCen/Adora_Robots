2024-09-14T02:36:25.430567Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 20ms }, queue_size: Some(1000) }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee63-85d3-74fc-bc83-e805cdc51607`
2024-09-14T02:36:49.599262Z  INFO dora_coordinator: successfully retrieved logs for `0191ee63-85d3-74fc-bc83-e805cdc51607/mickrobot_chassis`
2024-09-14T02:38:31.279940Z  INFO dora_coordinator: successfully send stop dataflow `0191ee63-85d3-74fc-bc83-e805cdc51607` to all daemons
2024-09-14T02:38:36.674918Z ERROR dora_coordinator::control: failed to send reply
2024-09-14T02:38:49.899610Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 20ms }, queue_size: Some(1000) }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee65-ba26-7778-ab19-b100d88e3ba6`
2024-09-14T02:39:00.555864Z  INFO dora_coordinator: successfully send stop dataflow `0191ee65-ba26-7778-ab19-b100d88e3ba6` to all daemons
2024-09-14T02:39:02.924202Z ERROR dora_coordinator::control: failed to send reply
2024-09-14T02:39:22.324646Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee66-38d1-763f-b456-783ae11820f6`
2024-09-14T02:40:51.282708Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee67-944f-7fb8-84bf-f86772d0e2d5`
2024-09-14T02:41:13.946453Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee67-ecd6-7074-97f2-a139cd400be0`
2024-09-14T02:41:43.731329Z  INFO dora_coordinator: successfully retrieved logs for `0191ee67-ecd6-7074-97f2-a139cd400be0/mickrobot_chassis`
2024-09-14T02:42:15.582808Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee68-dd9b-7ac5-bafe-647bfe6cb6b6`
2024-09-14T02:42:33.790172Z  INFO dora_coordinator: successfully retrieved logs for `0191ee68-dd9b-7ac5-bafe-647bfe6cb6b6/mickrobot_chassis`
2024-09-14T02:42:54.514723Z  INFO dora_coordinator: successfully retrieved logs for `0191ee68-dd9b-7ac5-bafe-647bfe6cb6b6/mickrobot_chassis`
2024-09-14T02:50:45.416839Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee70-a524-7dd1-ad82-5f674531a2fe`
2024-09-14T02:50:55.250443Z  INFO dora_coordinator: successfully retrieved logs for `0191ee70-a524-7dd1-ad82-5f674531a2fe/mickrobot_chassis`
2024-09-14T02:52:47.784662Z  INFO dora_coordinator: successfully send stop dataflow `0191ee70-a524-7dd1-ad82-5f674531a2fe` to all daemons
2024-09-14T02:52:53.625165Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee72-99f5-71f5-8a00-7d998e05b87b`
2024-09-14T02:54:10.310967Z  INFO dora_coordinator: successfully retrieved logs for `0191ee72-99f5-71f5-8a00-7d998e05b87b/mickrobot_chassis`
2024-09-14T02:56:29.120645Z  INFO dora_coordinator: successfully send stop dataflow `0191ee72-99f5-71f5-8a00-7d998e05b87b` to all daemons
2024-09-14T02:56:49.007390Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee76-316a-70e9-ba48-3cb5733e093e`
2024-09-14T02:57:09.644172Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee76-8208-7347-8776-6d05ba571ed0`
2024-09-14T02:57:12.013911Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:57:47.087260Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:58:15.020541Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:58:26.604306Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:58:39.664530Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:58:48.799090Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:59:02.072391Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:59:13.528022Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:59:20.482754Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:59:26.868311Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:59:34.749003Z  INFO dora_coordinator: successfully retrieved logs for `0191ee76-8208-7347-8776-6d05ba571ed0/mickrobot_chassis`
2024-09-14T02:59:47.619548Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0191ee78-eb20-7c09-af16-5e068f7376dc`
2024-09-14T02:59:51.106550Z  INFO dora_coordinator: successfully retrieved logs for `0191ee78-eb20-7c09-af16-5e068f7376dc/mickrobot_chassis`
2024-09-23T11:52:25.631636Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921eb9-cb1d-73a3-83ca-6fdaf19a34b5`
2024-09-23T11:52:50.619140Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921eba-2cb8-71db-852c-8a53b38e3d06`
2024-09-23T11:53:00.591110Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921eba-53ac-708c-b3cc-d99ad6c1039e`
2024-09-23T11:54:11.094634Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ebb-6713-77f6-a8c3-e71ee411fba3`
2024-09-23T11:54:17.610737Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ebb-8088-7eb3-b066-7f36b845e680`
2024-09-23T11:55:06.517395Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ebc-3f92-7a81-9db6-728e83b89092`
2024-09-23T11:56:50.563579Z  INFO dora_coordinator: Received destroy command
2024-09-23T11:56:50.564223Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-09-23T11:56:50.564321Z  INFO dora_coordinator: stopped
2024-09-23T11:57:18.358881Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ebe-4294-7f82-9962-d83d17252d76`
2024-09-23T11:58:30.831512Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ebf-5dad-729b-a0e9-36c0750155ed`
2024-09-23T11:59:35.491903Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ec0-5a41-7533-a80e-524e99a05f24`
2024-09-23T11:59:47.196264Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921ec0-87f9-74b5-a2b7-69b256f10e22`
2024-09-23T11:59:51.465836Z  INFO dora_coordinator: successfully send stop dataflow `01921ec0-87f9-74b5-a2b7-69b256f10e22` to all daemons
2024-09-23T12:14:38.399634Z  INFO dora_coordinator: Received destroy command
2024-09-23T12:14:38.400333Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-09-23T12:14:38.400622Z  INFO dora_coordinator: stopped
2024-09-23T13:12:57.321753Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(0), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921f03-84e2-7167-baca-0461958ea427`
2024-09-23T13:13:18.393539Z  INFO dora_coordinator: successfully send stop dataflow `01921f03-84e2-7167-baca-0461958ea427` to all daemons
2024-09-23T13:13:33.590933Z ERROR dora_coordinator::control: failed to send reply
2024-09-23T13:14:08.545648Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(0), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01921f04-9b1b-746d-88f0-e6e1eef61cb7`
2024-09-23T13:15:45.553710Z  INFO dora_coordinator: successfully send stop dataflow `01921f04-9b1b-746d-88f0-e6e1eef61cb7` to all daemons
2024-09-23T13:16:00.606965Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T07:31:11.753549Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d3d-b505-7b6e-bf38-3800ead9bd24`
2024-09-26T07:31:37.174089Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d3e-1852-77c7-9f7c-83a733fe3ef5`
2024-09-26T07:32:10.694061Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d3e-9b42-7b6e-b877-5439c80a1f9a`
2024-09-26T07:33:25.280262Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d3f-be9c-71cf-8817-8fe31c684864`
2024-09-26T07:34:48.421191Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d41-0361-7318-9da3-44ccd430a59a`
2024-09-26T07:35:22.129470Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d41-870b-7053-bd13-a8bd687e6f4e`
2024-09-26T07:36:22.694100Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d42-73a0-72e4-9170-09032dd43fd3`
2024-09-26T07:36:26.707879Z  INFO dora_coordinator: successfully send stop dataflow `01922d42-73a0-72e4-9170-09032dd43fd3` to all daemons
2024-09-26T07:36:37.401710Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d42-ad16-7bcc-a545-f9e3383043af`
2024-09-26T07:36:41.916911Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T07:37:52.420130Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(1), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d43-d221-7d95-932e-1f2ceeec1880`
2024-09-26T07:38:00.751952Z  INFO dora_coordinator: successfully send stop dataflow `01922d43-d221-7d95-932e-1f2ceeec1880` to all daemons
2024-09-26T07:38:15.803732Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T07:38:33.015489Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("webcam"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("image")}, source: Python(PythonSource { source: "webcam.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("webcam"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project"}: dora_coordinator::run: successfully spawned dataflow `01922d44-70b5-7d7f-91c9-2d0ec27007e8`
2024-09-26T07:38:38.388448Z  INFO dora_coordinator: successfully send stop dataflow `01922d44-70b5-7d7f-91c9-2d0ec27007e8` to all daemons
2024-09-26T07:39:20.859435Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("webcam"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("image")}, source: Python(PythonSource { source: "webcam.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("webcam"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project"}: dora_coordinator::run: successfully spawned dataflow `01922d45-2b99-7f2f-bff6-06f7a8f5427a`
2024-09-26T07:39:34.520281Z  INFO dora_coordinator: successfully send stop dataflow `01922d45-2b99-7f2f-bff6-06f7a8f5427a` to all daemons
2024-09-26T07:39:36.553004Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("webcam"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("image")}, source: Python(PythonSource { source: "webcam.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("webcam"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project"}: dora_coordinator::run: successfully spawned dataflow `01922d45-68e7-7852-8dc1-9e188f361599`
2024-09-26T07:41:55.937947Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("webcam"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("image")}, source: Python(PythonSource { source: "webcam.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("webcam"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project"}: dora_coordinator::run: successfully spawned dataflow `01922d47-8960-7ebe-9fbf-0ae306981842`
2024-09-26T07:42:01.608239Z  INFO dora_coordinator: successfully send stop dataflow `01922d47-8960-7ebe-9fbf-0ae306981842` to all daemons
2024-09-26T07:42:33.514071Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d48-1c25-7f82-b011-94d1511975c5`
2024-09-26T07:42:56.650708Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d48-7685-7ed4-b3e9-80834a9ae057`
2024-09-26T07:50:03.060095Z  INFO dora_coordinator: successfully send stop dataflow `01922d48-7685-7ed4-b3e9-80834a9ae057` to all daemons
2024-09-26T07:50:18.113865Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T07:50:23.991060Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d4f-49f4-796e-9e73-984dbfb8a1c8`
2024-09-26T07:53:39.536756Z  INFO dora_coordinator: successfully send stop dataflow `01922d4f-49f4-796e-9e73-984dbfb8a1c8` to all daemons
2024-09-26T07:53:42.512350Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d52-516c-703c-aae6-f9a50af574b8`
2024-09-26T07:54:01.428307Z  INFO dora_coordinator: successfully send stop dataflow `01922d52-516c-703c-aae6-f9a50af574b8` to all daemons
2024-09-26T07:54:05.690043Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("keyboard"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "./get_keyboard_value2.py", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("tick"): Input { mapping: Timer { interval: 100ms }, queue_size: None }}, outputs: {DataId("CmdVelTwist")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: Some(CustomNode { source: "build/mickrobotx4", args: None, envs: None, build: None, send_stdout_as: None, run_config: NodeRunConfig { inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} } }), operator: None, path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d52-abf6-7d64-84af-edd3a198c874`
2024-09-26T07:54:17.131920Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T07:54:57.540886Z  INFO dora_coordinator: successfully send stop dataflow `01922d52-abf6-7d64-84af-edd3a198c874` to all daemons
2024-09-26T08:25:34.916449Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d6f-7fbf-7bda-a26c-5108c28e89e1`
2024-09-26T08:25:53.175002Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d6f-c713-7c5b-8355-ebe1ffdbee96`
2024-09-26T08:29:03.103481Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d72-acfb-71f4-81a2-d362cce02689`
2024-09-26T08:30:17.281284Z  INFO dora_coordinator: Received destroy command
2024-09-26T08:30:17.282039Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-09-26T08:30:17.282174Z  INFO dora_coordinator: stopped
2024-09-26T08:30:57.516374Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d74-6be8-7fc4-abac-9a9a1cacbee9`
2024-09-26T08:31:24.755281Z  INFO dora_coordinator: Received destroy command
2024-09-26T08:31:24.755961Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-09-26T08:31:24.756066Z  INFO dora_coordinator: stopped
2024-09-26T08:32:02.239375Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d75-68bb-77ed-9a38-fcadb38554b8`
2024-09-26T08:32:30.816136Z  INFO dora_coordinator: successfully send stop dataflow `01922d75-68bb-77ed-9a38-fcadb38554b8` to all daemons
2024-09-26T08:32:33.243659Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d75-e1d7-777f-bd1e-758ef0eeaec2`
2024-09-26T08:32:46.055564Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:33:14.576873Z  INFO dora_coordinator: successfully send stop dataflow `01922d75-e1d7-777f-bd1e-758ef0eeaec2` to all daemons
2024-09-26T08:33:19.100261Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d76-94f8-7c5b-822e-6eed8537f497`
2024-09-26T08:33:29.603244Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:33:35.671238Z  INFO dora_coordinator: successfully retrieved logs for `01922d76-94f8-7c5b-822e-6eed8537f497/mickrobot_chassis`
2024-09-26T08:35:17.032290Z  INFO dora_coordinator: successfully send stop dataflow `01922d76-94f8-7c5b-822e-6eed8537f497` to all daemons
2024-09-26T08:35:32.076480Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:35:38.822908Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d78-b6c3-7cb4-853d-d20d545d03b2`
2024-09-26T08:35:44.921361Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:35:47.194747Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:35:48.262380Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:35:49.241168Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:35:50.006223Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:35:54.408303Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:36:39.413642Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:36:44.490425Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:36:45.653993Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:36:47.622457Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:36:59.870104Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:37:08.656157Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:37:11.805042Z  INFO dora_coordinator: successfully retrieved logs for `01922d78-b6c3-7cb4-853d-d20d545d03b2/mickrobot_chassis`
2024-09-26T08:39:19.692311Z  INFO dora_coordinator: successfully send stop dataflow `01922d78-b6c3-7cb4-853d-d20d545d03b2` to all daemons
2024-09-26T08:39:26.485097Z  INFO dora_coordinator: successfully send stop dataflow `01922d78-b6c3-7cb4-853d-d20d545d03b2` to all daemons
2024-09-26T08:39:34.740967Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:39:37.052194Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d7c-5957-7129-9bd7-af469021b79b`
2024-09-26T08:39:45.782146Z  INFO dora_coordinator: successfully retrieved logs for `01922d7c-5957-7129-9bd7-af469021b79b/mickrobot_chassis`
2024-09-26T08:39:48.417327Z  INFO dora_coordinator: successfully retrieved logs for `01922d7c-5957-7129-9bd7-af469021b79b/mickrobot_chassis`
2024-09-26T08:39:49.621824Z  INFO dora_coordinator: successfully retrieved logs for `01922d7c-5957-7129-9bd7-af469021b79b/mickrobot_chassis`
2024-09-26T08:39:50.394204Z  INFO dora_coordinator: successfully retrieved logs for `01922d7c-5957-7129-9bd7-af469021b79b/mickrobot_chassis`
2024-09-26T08:39:51.209410Z  INFO dora_coordinator: successfully retrieved logs for `01922d7c-5957-7129-9bd7-af469021b79b/mickrobot_chassis`
2024-09-26T08:39:57.315261Z  INFO dora_coordinator: successfully retrieved logs for `01922d7c-5957-7129-9bd7-af469021b79b/mickrobot_chassis`
2024-09-26T08:40:38.024723Z  INFO dora_coordinator: successfully send stop dataflow `01922d7c-5957-7129-9bd7-af469021b79b` to all daemons
2024-09-26T08:40:40.952820Z  INFO dora_coordinator: successfully send stop dataflow `01922d7c-5957-7129-9bd7-af469021b79b` to all daemons
2024-09-26T08:40:53.078090Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:41:37.052985Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d7e-2e19-7b35-bb01-c3c762b6076f`
2024-09-26T08:41:47.841465Z  INFO dora_coordinator: successfully retrieved logs for `01922d7e-2e19-7b35-bb01-c3c762b6076f/mickrobot_chassis`
2024-09-26T08:42:28.407521Z  INFO dora_coordinator: successfully retrieved logs for `01922d7e-2e19-7b35-bb01-c3c762b6076f/mickrobot_chassis`
2024-09-26T08:42:42.390310Z  INFO dora_coordinator: successfully retrieved logs for `01922d7e-2e19-7b35-bb01-c3c762b6076f/mickrobot_chassis`
2024-09-26T08:43:49.521126Z  INFO dora_coordinator: successfully send stop dataflow `01922d7e-2e19-7b35-bb01-c3c762b6076f` to all daemons
2024-09-26T08:43:55.745278Z  INFO dora_coordinator: successfully send stop dataflow `01922d7e-2e19-7b35-bb01-c3c762b6076f` to all daemons
2024-09-26T08:44:04.570935Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:44:09.410912Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d80-813e-7ec6-b2df-66637522603b`
2024-09-26T08:44:14.949795Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:16.465993Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:17.226484Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:17.814118Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:18.282308Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:18.746066Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:28.214533Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:44:35.167003Z  INFO dora_coordinator: successfully retrieved logs for `01922d80-813e-7ec6-b2df-66637522603b/mickrobot_chassis`
2024-09-26T08:47:33.936775Z  INFO dora_coordinator: successfully send stop dataflow `01922d80-813e-7ec6-b2df-66637522603b` to all daemons
2024-09-26T08:47:40.953078Z  INFO dora_coordinator: successfully send stop dataflow `01922d80-813e-7ec6-b2df-66637522603b` to all daemons
2024-09-26T08:47:48.990183Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:47:50.495442Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb`
2024-09-26T08:47:55.498363Z  INFO dora_coordinator: successfully retrieved logs for `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb/mickrobot_chassis`
2024-09-26T08:48:01.866735Z  INFO dora_coordinator: successfully retrieved logs for `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb/mickrobot_chassis`
2024-09-26T08:48:29.708940Z  INFO dora_coordinator: successfully retrieved logs for `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb/text-interpolation`
2024-09-26T08:48:31.197597Z  INFO dora_coordinator: successfully retrieved logs for `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb/text-interpolation`
2024-09-26T08:51:25.281028Z  INFO dora_coordinator: successfully send stop dataflow `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb` to all daemons
2024-09-26T08:51:33.889412Z  INFO dora_coordinator: successfully send stop dataflow `01922d83-e0db-7487-b9d4-6ddb9cbf4ebb` to all daemons
2024-09-26T08:51:40.330675Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:51:41.708712Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d87-6808-7c41-9ed5-f79a51f9f59b`
2024-09-26T08:51:45.801642Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:47.628840Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:52.001151Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:53.000771Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:53.956961Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:54.645761Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:56.709529Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:51:59.483273Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/mickrobot_chassis`
2024-09-26T08:52:01.282769Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/mickrobot_chassis`
2024-09-26T08:52:07.134036Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/mickrobot_chassis`
2024-09-26T08:52:09.721200Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:52:11.017036Z  INFO dora_coordinator: successfully retrieved logs for `01922d87-6808-7c41-9ed5-f79a51f9f59b/text-interpolation`
2024-09-26T08:52:46.156611Z  INFO dora_coordinator: successfully send stop dataflow `01922d87-6808-7c41-9ed5-f79a51f9f59b` to all daemons
2024-09-26T08:52:49.992853Z  INFO dora_coordinator: successfully send stop dataflow `01922d87-6808-7c41-9ed5-f79a51f9f59b` to all daemons
2024-09-26T08:53:01.210170Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:54:06.903822Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl-recorder"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d89-9f33-77b0-9435-9f5ae8e1bd25`
2024-09-26T08:54:13.613646Z  INFO dora_coordinator: successfully retrieved logs for `01922d89-9f33-77b0-9435-9f5ae8e1bd25/text-interpolation`
2024-09-26T08:57:11.269467Z  INFO dora_coordinator: successfully send stop dataflow `01922d89-9f33-77b0-9435-9f5ae8e1bd25` to all daemons
2024-09-26T08:57:18.608951Z  INFO dora_coordinator: successfully send stop dataflow `01922d89-9f33-77b0-9435-9f5ae8e1bd25` to all daemons
2024-09-26T08:57:26.318403Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T08:58:17.259449Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d8d-7127-732a-8889-27fd6312367a`
2024-09-26T08:58:24.505670Z  INFO dora_coordinator: successfully retrieved logs for `01922d8d-7127-732a-8889-27fd6312367a/text-interpolation`
2024-09-26T08:58:25.596963Z  INFO dora_coordinator: successfully retrieved logs for `01922d8d-7127-732a-8889-27fd6312367a/text-interpolation`
2024-09-26T08:58:26.569863Z  INFO dora_coordinator: successfully retrieved logs for `01922d8d-7127-732a-8889-27fd6312367a/text-interpolation`
2024-09-26T08:58:27.633467Z  INFO dora_coordinator: successfully retrieved logs for `01922d8d-7127-732a-8889-27fd6312367a/text-interpolation`
2024-09-26T08:58:28.507048Z  INFO dora_coordinator: successfully retrieved logs for `01922d8d-7127-732a-8889-27fd6312367a/mickrobot_chassis`
2024-09-26T09:00:06.992596Z  INFO dora_coordinator: successfully send stop dataflow `01922d8d-7127-732a-8889-27fd6312367a` to all daemons
2024-09-26T09:00:10.241085Z  INFO dora_coordinator: successfully send stop dataflow `01922d8d-7127-732a-8889-27fd6312367a` to all daemons
2024-09-26T09:00:22.045198Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:00:24.035141Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d8f-605f-7a09-98a3-aa83902e5de9`
2024-09-26T09:00:29.453211Z  INFO dora_coordinator: successfully retrieved logs for `01922d8f-605f-7a09-98a3-aa83902e5de9/mickrobot_chassis`
2024-09-26T09:00:34.703406Z  INFO dora_coordinator: successfully retrieved logs for `01922d8f-605f-7a09-98a3-aa83902e5de9/mickrobot_chassis`
2024-09-26T09:00:45.009971Z  INFO dora_coordinator: successfully retrieved logs for `01922d8f-605f-7a09-98a3-aa83902e5de9/text_interpolation`
2024-09-26T09:00:46.236624Z  INFO dora_coordinator: successfully retrieved logs for `01922d8f-605f-7a09-98a3-aa83902e5de9/text_interpolation`
2024-09-26T09:02:38.620790Z  INFO dora_coordinator: successfully send stop dataflow `01922d8f-605f-7a09-98a3-aa83902e5de9` to all daemons
2024-09-26T09:02:41.536888Z  INFO dora_coordinator: successfully send stop dataflow `01922d8f-605f-7a09-98a3-aa83902e5de9` to all daemons
2024-09-26T09:02:53.665448Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:03:03.376860Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d91-cecc-7c18-980d-d0ce39604c0f`
2024-09-26T09:03:08.901466Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:10.177140Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:10.825322Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:11.405116Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:16.205306Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:17.313700Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:17.928679Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:21.286579Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/mickrobot_chassis`
2024-09-26T09:03:24.489768Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:30.464792Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:31.253020Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:31.961451Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:32.453400Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:03:33.456853Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/mickrobot_chassis`
2024-09-26T09:03:46.167391Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/mickrobot_chassis`
2024-09-26T09:04:30.988562Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:32.485679Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:33.269336Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:33.841159Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:34.409203Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:34.948270Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:35.569556Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:36.081345Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:36.685922Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:04:38.341103Z  INFO dora_coordinator: successfully retrieved logs for `01922d91-cecc-7c18-980d-d0ce39604c0f/text_interpolation`
2024-09-26T09:06:34.472726Z  INFO dora_coordinator: successfully send stop dataflow `01922d91-cecc-7c18-980d-d0ce39604c0f` to all daemons
2024-09-26T09:06:37.576652Z  INFO dora_coordinator: successfully send stop dataflow `01922d91-cecc-7c18-980d-d0ce39604c0f` to all daemons
2024-09-26T09:06:49.526414Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:06:49.526498Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:06:51.736390Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d95-4ad4-734d-87ef-686abf36523e`
2024-09-26T09:06:54.873252Z  INFO dora_coordinator: successfully retrieved logs for `01922d95-4ad4-734d-87ef-686abf36523e/text_interpolation`
2024-09-26T09:06:55.609028Z  INFO dora_coordinator: successfully retrieved logs for `01922d95-4ad4-734d-87ef-686abf36523e/text_interpolation`
2024-09-26T09:06:56.437589Z  INFO dora_coordinator: successfully retrieved logs for `01922d95-4ad4-734d-87ef-686abf36523e/text_interpolation`
2024-09-26T09:08:48.388818Z  INFO dora_coordinator: successfully send stop dataflow `01922d95-4ad4-734d-87ef-686abf36523e` to all daemons
2024-09-26T09:08:51.437147Z  INFO dora_coordinator: successfully send stop dataflow `01922d95-4ad4-734d-87ef-686abf36523e` to all daemons
2024-09-26T09:09:03.441874Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:09:49.232940Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d98-002d-7437-b6a2-481fd54491d1`
2024-09-26T09:09:54.514144Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/mickrobot_chassis`
2024-09-26T09:10:01.186259Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/mickrobot_chassis`
2024-09-26T09:10:22.522641Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/mickrobot_chassis`
2024-09-26T09:10:26.733599Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/text_interpolation`
2024-09-26T09:10:28.009682Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/text_interpolation`
2024-09-26T09:12:10.697388Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/key-interpolation`
2024-09-26T09:12:11.700754Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/key-interpolation`
2024-09-26T09:12:37.229288Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/key-interpolation`
2024-09-26T09:15:13.446159Z  INFO dora_coordinator: successfully retrieved logs for `01922d98-002d-7437-b6a2-481fd54491d1/key-interpolation`
2024-09-26T09:15:28.461094Z  INFO dora_coordinator: successfully send stop dataflow `01922d98-002d-7437-b6a2-481fd54491d1` to all daemons
2024-09-26T09:15:43.509358Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:15:54.918898Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922d9d-94a3-734c-9588-ab7102fd165c`
2024-09-26T09:15:59.576749Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:06.160969Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:06.989533Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:08.096813Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:08.813264Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:09.433369Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:10.197496Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:10.696914Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:11.185059Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:11.569134Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:11.882075Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:12.168967Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:12.393961Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:12.649086Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:12.901080Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/key-interpolation`
2024-09-26T09:16:18.013869Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:18.933853Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:19.357045Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:19.741465Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:20.065462Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:20.368999Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:20.653471Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:20.937895Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:21.206018Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:21.473833Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:21.696968Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:21.973004Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:22.236920Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:22.460964Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:22.700070Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/text_interpolation`
2024-09-26T09:16:56.517172Z  INFO dora_coordinator: successfully retrieved logs for `01922d9d-94a3-734c-9588-ab7102fd165c/mickrobot_chassis`
2024-09-26T09:20:13.960720Z  INFO dora_coordinator: successfully send stop dataflow `01922d9d-94a3-734c-9588-ab7102fd165c` to all daemons
2024-09-26T09:20:16.557318Z  INFO dora_coordinator: successfully send stop dataflow `01922d9d-94a3-734c-9588-ab7102fd165c` to all daemons
2024-09-26T09:20:29.013067Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:20:30.241844Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922da1-c81d-7006-8805-f6c37a49c8ee`
2024-09-26T09:20:38.995376Z  INFO dora_coordinator: successfully retrieved logs for `01922da1-c81d-7006-8805-f6c37a49c8ee/mickrobot_chassis`
2024-09-26T09:20:45.117473Z  INFO dora_coordinator: successfully retrieved logs for `01922da1-c81d-7006-8805-f6c37a49c8ee/text_interpolation`
2024-09-26T09:20:46.257696Z  INFO dora_coordinator: successfully retrieved logs for `01922da1-c81d-7006-8805-f6c37a49c8ee/text_interpolation`
2024-09-26T09:20:47.246094Z  INFO dora_coordinator: successfully retrieved logs for `01922da1-c81d-7006-8805-f6c37a49c8ee/mickrobot_chassis`
2024-09-26T09:23:01.088843Z  INFO dora_coordinator: successfully send stop dataflow `01922da1-c81d-7006-8805-f6c37a49c8ee` to all daemons
2024-09-26T09:23:03.745106Z  INFO dora_coordinator: successfully send stop dataflow `01922da1-c81d-7006-8805-f6c37a49c8ee` to all daemons
2024-09-26T09:23:16.138468Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:23:16.181900Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922da4-5052-7e22-86da-58ce176eef75`
2024-09-26T09:23:24.525854Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:25.541240Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:26.084697Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:26.589627Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:27.101317Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:27.716495Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:28.269039Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:28.724731Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:29.253541Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:30.213346Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:23:30.768934Z  INFO dora_coordinator: successfully retrieved logs for `01922da4-5052-7e22-86da-58ce176eef75/text_interpolation`
2024-09-26T09:24:11.484847Z  INFO dora_coordinator: successfully send stop dataflow `01922da4-5052-7e22-86da-58ce176eef75` to all daemons
2024-09-26T09:24:14.233190Z  INFO dora_coordinator: successfully send stop dataflow `01922da4-5052-7e22-86da-58ce176eef75` to all daemons
2024-09-26T09:24:26.531260Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:24:28.884356Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922da5-6c4f-7745-a342-c2d86cbe8c11`
2024-09-26T09:24:35.488774Z  INFO dora_coordinator: successfully retrieved logs for `01922da5-6c4f-7745-a342-c2d86cbe8c11/text_interpolation`
2024-09-26T09:24:36.273130Z  INFO dora_coordinator: successfully retrieved logs for `01922da5-6c4f-7745-a342-c2d86cbe8c11/text_interpolation`
2024-09-26T09:24:37.298132Z  INFO dora_coordinator: successfully retrieved logs for `01922da5-6c4f-7745-a342-c2d86cbe8c11/mickrobot_chassis`
2024-09-26T09:24:39.281706Z  INFO dora_coordinator: successfully retrieved logs for `01922da5-6c4f-7745-a342-c2d86cbe8c11/text_interpolation`
2024-09-26T09:24:44.037832Z  INFO dora_coordinator: successfully retrieved logs for `01922da5-6c4f-7745-a342-c2d86cbe8c11/text_interpolation`
2024-09-26T09:24:45.425852Z  INFO dora_coordinator: successfully retrieved logs for `01922da5-6c4f-7745-a342-c2d86cbe8c11/mickrobot_chassis`
2024-09-26T09:25:25.180935Z  INFO dora_coordinator: successfully send stop dataflow `01922da5-6c4f-7745-a342-c2d86cbe8c11` to all daemons
2024-09-26T09:25:28.717002Z  INFO dora_coordinator: successfully send stop dataflow `01922da5-6c4f-7745-a342-c2d86cbe8c11` to all daemons
2024-09-26T09:25:37.529238Z  INFO dora_coordinator: successfully send stop dataflow `01922da5-6c4f-7745-a342-c2d86cbe8c11` to all daemons
2024-09-26T09:25:40.235697Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:25:40.235697Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:25:47.282230Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922da6-9e8e-76e8-9cf4-9a3769a50dab`
2024-09-26T09:25:55.623596Z  INFO dora_coordinator: successfully retrieved logs for `01922da6-9e8e-76e8-9cf4-9a3769a50dab/mickrobot_chassis`
2024-09-26T09:26:01.061080Z  INFO dora_coordinator: successfully retrieved logs for `01922da6-9e8e-76e8-9cf4-9a3769a50dab/text_interpolation`
2024-09-26T09:26:11.229733Z  INFO dora_coordinator: successfully retrieved logs for `01922da6-9e8e-76e8-9cf4-9a3769a50dab/key-interpolation`
2024-09-26T09:26:12.345111Z  INFO dora_coordinator: successfully retrieved logs for `01922da6-9e8e-76e8-9cf4-9a3769a50dab/key-interpolation`
2024-09-26T09:26:13.492734Z  INFO dora_coordinator: successfully retrieved logs for `01922da6-9e8e-76e8-9cf4-9a3769a50dab/key-interpolation`
2024-09-26T09:26:45.634403Z  INFO dora_coordinator: successfully retrieved logs for `01922da6-9e8e-76e8-9cf4-9a3769a50dab/mickrobot_chassis`
2024-09-26T09:30:45.521241Z  INFO dora_coordinator: successfully send stop dataflow `01922da6-9e8e-76e8-9cf4-9a3769a50dab` to all daemons
2024-09-26T09:31:00.570651Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:39:31.151930Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922db3-30cc-749e-bcfd-3188e5bb1f6d`
2024-09-26T09:39:36.096447Z  INFO dora_coordinator: successfully retrieved logs for `01922db3-30cc-749e-bcfd-3188e5bb1f6d/key-interpolation`
2024-09-26T09:39:38.884054Z  INFO dora_coordinator: successfully retrieved logs for `01922db3-30cc-749e-bcfd-3188e5bb1f6d/text_interpolation`
2024-09-26T09:40:21.839660Z  INFO dora_coordinator: successfully send stop dataflow `01922db3-30cc-749e-bcfd-3188e5bb1f6d` to all daemons
2024-09-26T09:40:36.015934Z  INFO dora_coordinator: successfully send stop dataflow `01922db3-30cc-749e-bcfd-3188e5bb1f6d` to all daemons
2024-09-26T09:40:36.893528Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:40:43.291293Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922db4-4a97-7e02-8f42-b13fa620c915`
2024-09-26T09:40:48.731969Z  INFO dora_coordinator: successfully retrieved logs for `01922db4-4a97-7e02-8f42-b13fa620c915/text_interpolation`
2024-09-26T09:40:54.548367Z  INFO dora_coordinator: successfully retrieved logs for `01922db4-4a97-7e02-8f42-b13fa620c915/text_interpolation`
2024-09-26T09:41:40.223395Z  INFO dora_coordinator: successfully send stop dataflow `01922db4-4a97-7e02-8f42-b13fa620c915` to all daemons
2024-09-26T09:41:45.087685Z  INFO dora_coordinator: successfully send stop dataflow `01922db4-4a97-7e02-8f42-b13fa620c915` to all daemons
2024-09-26T09:41:55.262231Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:41:58.009953Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922db5-6e75-74f9-8f4e-b2b21cc1980d`
2024-09-26T09:42:07.584309Z  INFO dora_coordinator: successfully retrieved logs for `01922db5-6e75-74f9-8f4e-b2b21cc1980d/text_interpolation`
2024-09-26T09:43:03.847455Z  INFO dora_coordinator: successfully send stop dataflow `01922db5-6e75-74f9-8f4e-b2b21cc1980d` to all daemons
2024-09-26T09:43:10.423619Z  INFO dora_coordinator: successfully send stop dataflow `01922db5-6e75-74f9-8f4e-b2b21cc1980d` to all daemons
2024-09-26T09:43:18.897268Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:43:22.076175Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922db6-b6d8-75e0-b407-7a0d8387c9d0`
2024-09-26T09:43:27.496293Z  INFO dora_coordinator: successfully retrieved logs for `01922db6-b6d8-75e0-b407-7a0d8387c9d0/text_interpolation`
2024-09-26T09:43:33.528614Z  INFO dora_coordinator: successfully retrieved logs for `01922db6-b6d8-75e0-b407-7a0d8387c9d0/key-interpolation`
2024-09-26T09:43:34.788201Z  INFO dora_coordinator: successfully retrieved logs for `01922db6-b6d8-75e0-b407-7a0d8387c9d0/key-interpolation`
2024-09-26T09:43:36.464380Z  INFO dora_coordinator: successfully retrieved logs for `01922db6-b6d8-75e0-b407-7a0d8387c9d0/text_interpolation`
2024-09-26T09:45:17.107674Z  INFO dora_coordinator: successfully send stop dataflow `01922db6-b6d8-75e0-b407-7a0d8387c9d0` to all daemons
2024-09-26T09:45:32.161436Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:46:46.817719Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922db9-d69d-7650-a97b-bb91e7a4dac4`
2024-09-26T09:46:53.247875Z  INFO dora_coordinator: successfully retrieved logs for `01922db9-d69d-7650-a97b-bb91e7a4dac4/text_interpolation`
2024-09-26T09:47:08.241397Z  INFO dora_coordinator: successfully retrieved logs for `01922db9-d69d-7650-a97b-bb91e7a4dac4/text_interpolation`
2024-09-26T09:52:27.680289Z  INFO dora_coordinator: successfully retrieved logs for `01922db9-d69d-7650-a97b-bb91e7a4dac4/text_interpolation`
2024-09-26T09:56:30.779615Z  INFO dora_coordinator: successfully send stop dataflow `01922db9-d69d-7650-a97b-bb91e7a4dac4` to all daemons
2024-09-26T09:56:37.083804Z  INFO dora_coordinator: successfully send stop dataflow `01922db9-d69d-7650-a97b-bb91e7a4dac4` to all daemons
2024-09-26T09:56:45.828837Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:56:53.989847Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dc3-1a62-7e16-ba1b-6c04576f31b2`
2024-09-26T09:57:03.780708Z  INFO dora_coordinator: successfully retrieved logs for `01922dc3-1a62-7e16-ba1b-6c04576f31b2/text_interpolation`
2024-09-26T09:58:19.402787Z  INFO dora_coordinator: successfully send stop dataflow `01922dc3-1a62-7e16-ba1b-6c04576f31b2` to all daemons
2024-09-26T09:58:22.839118Z  INFO dora_coordinator: successfully send stop dataflow `01922dc3-1a62-7e16-ba1b-6c04576f31b2` to all daemons
2024-09-26T09:58:34.457266Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:58:34.457386Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T09:59:05.176773Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dc5-1ad5-77d6-ba07-bac0baef4ad2`
2024-09-26T09:59:23.077324Z  INFO dora_coordinator: successfully retrieved logs for `01922dc5-1ad5-77d6-ba07-bac0baef4ad2/text_interpolation`
2024-09-26T10:00:13.351263Z  INFO dora_coordinator: successfully send stop dataflow `01922dc5-1ad5-77d6-ba07-bac0baef4ad2` to all daemons
2024-09-26T10:00:16.787436Z  INFO dora_coordinator: successfully send stop dataflow `01922dc5-1ad5-77d6-ba07-bac0baef4ad2` to all daemons
2024-09-26T10:00:22.359324Z  INFO dora_coordinator: successfully send stop dataflow `01922dc5-1ad5-77d6-ba07-bac0baef4ad2` to all daemons
2024-09-26T10:00:28.399823Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:00:28.399900Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:00:32.833206Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dc6-713d-73aa-9e12-cbb960cdfe17`
2024-09-26T10:00:38.628295Z  INFO dora_coordinator: successfully retrieved logs for `01922dc6-713d-73aa-9e12-cbb960cdfe17/text_interpolation`
2024-09-26T10:00:48.941057Z  INFO dora_coordinator: successfully retrieved logs for `01922dc6-713d-73aa-9e12-cbb960cdfe17/text_interpolation`
2024-09-26T10:00:59.900685Z  INFO dora_coordinator: successfully retrieved logs for `01922dc6-713d-73aa-9e12-cbb960cdfe17/mickrobot_chassis`
2024-09-26T10:04:05.011409Z  INFO dora_coordinator: successfully send stop dataflow `01922dc6-713d-73aa-9e12-cbb960cdfe17` to all daemons
2024-09-26T10:04:08.323491Z  INFO dora_coordinator: successfully send stop dataflow `01922dc6-713d-73aa-9e12-cbb960cdfe17` to all daemons
2024-09-26T10:04:20.064626Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:04:52.093849Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dca-65f9-7c18-9014-63333e147e46`
2024-09-26T10:05:14.280647Z  INFO dora_coordinator: successfully retrieved logs for `01922dca-65f9-7c18-9014-63333e147e46/mickrobot_chassis`
2024-09-26T10:05:20.231149Z  INFO dora_coordinator: successfully retrieved logs for `01922dca-65f9-7c18-9014-63333e147e46/mickrobot_chassis`
2024-09-26T10:05:22.900455Z  INFO dora_coordinator: successfully retrieved logs for `01922dca-65f9-7c18-9014-63333e147e46/mickrobot_chassis`
2024-09-26T10:06:36.194003Z  INFO dora_coordinator: successfully retrieved logs for `01922dca-65f9-7c18-9014-63333e147e46/mickrobot_chassis`
2024-09-26T10:10:03.519583Z  INFO dora_coordinator: successfully retrieved logs for `01922dca-65f9-7c18-9014-63333e147e46/text_interpolation`
2024-09-26T10:10:05.411388Z  INFO dora_coordinator: successfully retrieved logs for `01922dca-65f9-7c18-9014-63333e147e46/text_interpolation`
2024-09-26T10:10:16.711608Z  INFO dora_coordinator: successfully send stop dataflow `01922dca-65f9-7c18-9014-63333e147e46` to all daemons
2024-09-26T10:10:31.760650Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:11:55.922114Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dd0-dd8d-7ee1-815d-9145087a3a36`
2024-09-26T10:12:03.137109Z  INFO dora_coordinator: successfully retrieved logs for `01922dd0-dd8d-7ee1-815d-9145087a3a36/text_interpolation`
2024-09-26T10:12:34.545969Z  INFO dora_coordinator: successfully retrieved logs for `01922dd0-dd8d-7ee1-815d-9145087a3a36/text_interpolation`
2024-09-26T10:14:22.539293Z  INFO dora_coordinator: successfully send stop dataflow `01922dd0-dd8d-7ee1-815d-9145087a3a36` to all daemons
2024-09-26T10:14:30.319157Z  INFO dora_coordinator: successfully send stop dataflow `01922dd0-dd8d-7ee1-815d-9145087a3a36` to all daemons
2024-09-26T10:14:37.587165Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:14:49.927310Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dd3-8543-76ea-80b2-639cbec099cf`
2024-09-26T10:15:01.248109Z  INFO dora_coordinator: successfully retrieved logs for `01922dd3-8543-76ea-80b2-639cbec099cf/text_interpolation`
2024-09-26T10:15:51.155140Z  INFO dora_coordinator: successfully retrieved logs for `01922dd3-8543-76ea-80b2-639cbec099cf/text_interpolation`
2024-09-26T10:16:24.274665Z  INFO dora_coordinator: successfully send stop dataflow `01922dd3-8543-76ea-80b2-639cbec099cf` to all daemons
2024-09-26T10:16:31.891060Z  INFO dora_coordinator: successfully send stop dataflow `01922dd3-8543-76ea-80b2-639cbec099cf` to all daemons
2024-09-26T10:16:39.323478Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:16:58.256261Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dd5-7a8b-7e7f-940b-316f6d038845`
2024-09-26T10:17:07.771138Z  INFO dora_coordinator: successfully retrieved logs for `01922dd5-7a8b-7e7f-940b-316f6d038845/text_interpolation`
2024-09-26T10:17:52.290510Z  INFO dora_coordinator: successfully send stop dataflow `01922dd5-7a8b-7e7f-940b-316f6d038845` to all daemons
2024-09-26T10:17:58.322934Z  INFO dora_coordinator: successfully send stop dataflow `01922dd5-7a8b-7e7f-940b-316f6d038845` to all daemons
2024-09-26T10:18:07.336991Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:18:09.590913Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dd6-9132-77c3-ac90-1a78dbd2b8ec`
2024-09-26T10:18:16.532407Z  INFO dora_coordinator: successfully retrieved logs for `01922dd6-9132-77c3-ac90-1a78dbd2b8ec/text_interpolation`
2024-09-26T10:18:23.080398Z  INFO dora_coordinator: successfully retrieved logs for `01922dd6-9132-77c3-ac90-1a78dbd2b8ec/text_interpolation`
2024-09-26T10:22:36.142642Z  INFO dora_coordinator: successfully send stop dataflow `01922dd6-9132-77c3-ac90-1a78dbd2b8ec` to all daemons
2024-09-26T10:22:44.098849Z  INFO dora_coordinator: successfully send stop dataflow `01922dd6-9132-77c3-ac90-1a78dbd2b8ec` to all daemons
2024-09-26T10:22:51.190590Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:22:52.507603Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dda-e256-7e7e-ae01-eef026f1fa3a`
2024-09-26T10:22:57.664557Z  INFO dora_coordinator: successfully retrieved logs for `01922dda-e256-7e7e-ae01-eef026f1fa3a/text_interpolation`
2024-09-26T10:23:03.204453Z  INFO dora_coordinator: successfully retrieved logs for `01922dda-e256-7e7e-ae01-eef026f1fa3a/mickrobot_chassis`
2024-09-26T10:23:09.899586Z  INFO dora_coordinator: successfully retrieved logs for `01922dda-e256-7e7e-ae01-eef026f1fa3a/text_interpolation`
2024-09-26T10:23:47.324983Z  INFO dora_coordinator: successfully retrieved logs for `01922dda-e256-7e7e-ae01-eef026f1fa3a/text_interpolation`
2024-09-26T10:25:06.799285Z  INFO dora_coordinator: successfully send stop dataflow `01922dda-e256-7e7e-ae01-eef026f1fa3a` to all daemons
2024-09-26T10:25:09.547037Z  INFO dora_coordinator: successfully send stop dataflow `01922dda-e256-7e7e-ae01-eef026f1fa3a` to all daemons
2024-09-26T10:25:21.847950Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:28:47.730280Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de0-4ded-7fa3-8434-d9e73bd072f3`
2024-09-26T10:29:07.965708Z  INFO dora_coordinator: successfully retrieved logs for `01922de0-4ded-7fa3-8434-d9e73bd072f3/text_interpolation`
2024-09-26T10:29:21.966802Z  INFO dora_coordinator: successfully send stop dataflow `01922de0-4ded-7fa3-8434-d9e73bd072f3` to all daemons
2024-09-26T10:29:27.555509Z  INFO dora_coordinator: successfully send stop dataflow `01922de0-4ded-7fa3-8434-d9e73bd072f3` to all daemons
2024-09-26T10:29:37.014948Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:29:40.407982Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text_interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text_interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de1-1bb4-7597-8274-7e45c0ae03e7`
2024-09-26T10:29:45.739584Z  INFO dora_coordinator: successfully retrieved logs for `01922de1-1bb4-7597-8274-7e45c0ae03e7/text_interpolation`
2024-09-26T10:29:50.816435Z  INFO dora_coordinator: successfully retrieved logs for `01922de1-1bb4-7597-8274-7e45c0ae03e7/text_interpolation`
2024-09-26T10:30:32.423299Z  INFO dora_coordinator: successfully send stop dataflow `01922de1-1bb4-7597-8274-7e45c0ae03e7` to all daemons
2024-09-26T10:30:47.470407Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:31:19.594703Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de2-9f25-71a2-b876-1eaf7f0f30db`
2024-09-26T10:31:38.239543Z  INFO dora_coordinator: successfully retrieved logs for `01922de2-9f25-71a2-b876-1eaf7f0f30db/text-interpolation`
2024-09-26T10:32:21.190169Z  INFO dora_coordinator: successfully send stop dataflow `01922de2-9f25-71a2-b876-1eaf7f0f30db` to all daemons
2024-09-26T10:32:34.319001Z  INFO dora_coordinator: successfully send stop dataflow `01922de2-9f25-71a2-b876-1eaf7f0f30db` to all daemons
2024-09-26T10:32:36.236298Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:32:37.663939Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de3-d01b-733b-813e-26c08490a595`
2024-09-26T10:32:54.786867Z  INFO dora_coordinator: successfully send stop dataflow `01922de3-d01b-733b-813e-26c08490a595` to all daemons
2024-09-26T10:33:09.836662Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:34:14.969706Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de5-4c35-762a-bb67-b9661b381494`
2024-09-26T10:35:12.095001Z  INFO dora_coordinator: successfully send stop dataflow `01922de5-4c35-762a-bb67-b9661b381494` to all daemons
2024-09-26T10:35:22.915222Z  INFO dora_coordinator: successfully send stop dataflow `01922de5-4c35-762a-bb67-b9661b381494` to all daemons
2024-09-26T10:35:27.140533Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:35:42.260378Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de6-a12f-7d6c-9151-873d1e4f68cb`
2024-09-26T10:36:01.669154Z  INFO dora_coordinator: successfully retrieved logs for `01922de6-a12f-7d6c-9151-873d1e4f68cb/text-interpolation`
2024-09-26T10:36:13.329449Z  INFO dora_coordinator: successfully retrieved logs for `01922de6-a12f-7d6c-9151-873d1e4f68cb/mickrobot_chassis`
2024-09-26T10:36:34.377337Z  INFO dora_coordinator: successfully retrieved logs for `01922de6-a12f-7d6c-9151-873d1e4f68cb/text-interpolation`
2024-09-26T10:37:21.055224Z  INFO dora_coordinator: successfully retrieved logs for `01922de6-a12f-7d6c-9151-873d1e4f68cb/mickrobot_chassis`
2024-09-26T10:38:02.658809Z  INFO dora_coordinator: successfully send stop dataflow `01922de6-a12f-7d6c-9151-873d1e4f68cb` to all daemons
2024-09-26T10:38:05.110762Z  INFO dora_coordinator: successfully send stop dataflow `01922de6-a12f-7d6c-9151-873d1e4f68cb` to all daemons
2024-09-26T10:38:17.707797Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:38:19.292855Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922de9-0698-70ad-86df-f0111091afe7`
2024-09-26T10:38:54.619354Z  INFO dora_coordinator: successfully send stop dataflow `01922de9-0698-70ad-86df-f0111091afe7` to all daemons
2024-09-26T10:39:09.670850Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T10:40:16.401447Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl-recorder"), name: None, description: None, env: Some({"DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective"), "LLAMA_FACTORY_ROOT_PATH": String("/home/crp/dora_project/LLaMA-Factory")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("llama-factory-recorder"), args: None, build: Some("pip install llama-factory-recorder"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922dea-d00c-742e-b04e-9d04c9891f16`
2024-09-26T10:41:59.091142Z  INFO dora_coordinator: successfully send stop dataflow `01922dea-d00c-742e-b04e-9d04c9891f16` to all daemons
2024-09-26T10:42:14.124899Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T12:11:33.262835Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(0), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922e3e-620a-74f1-9f9a-4251c374b8b1`
2024-09-26T12:16:12.966664Z  INFO dora_coordinator: successfully send stop dataflow `01922e3e-620a-74f1-9f9a-4251c374b8b1` to all daemons
2024-09-26T12:16:21.082746Z  INFO dora_coordinator: successfully send stop dataflow `01922e3e-620a-74f1-9f9a-4251c374b8b1` to all daemons
2024-09-26T12:16:28.057620Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T12:16:34.318475Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(0), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a`
2024-09-26T12:16:40.418904Z  INFO dora_coordinator: successfully retrieved logs for `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a/mickrobot_chassis`
2024-09-26T12:16:42.439612Z  INFO dora_coordinator: successfully retrieved logs for `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a/mickrobot_chassis`
2024-09-26T12:16:43.376552Z  INFO dora_coordinator: successfully retrieved logs for `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a/mickrobot_chassis`
2024-09-26T12:16:44.054836Z  INFO dora_coordinator: successfully retrieved logs for `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a/mickrobot_chassis`
2024-09-26T12:17:01.266551Z  INFO dora_coordinator: successfully send stop dataflow `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a` to all daemons
2024-09-26T12:17:06.671023Z  INFO dora_coordinator: successfully send stop dataflow `01922e42-fa09-76b0-9af1-ab9e1c6a7f2a` to all daemons
2024-09-26T12:17:16.343346Z ERROR dora_coordinator::control: failed to send reply
2024-09-26T12:17:23.496947Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01922e43-ba25-7988-9363-e5f3ef778a2a`
2024-09-26T12:17:39.764823Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:41.992759Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:42.728284Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:43.428383Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:44.270641Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:44.951961Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:45.908643Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:46.631579Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:47.252224Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:47.848172Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:48.643468Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:17:49.319506Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/mickrobot_chassis`
2024-09-26T12:18:54.739241Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/text-interpolation`
2024-09-26T12:18:56.310279Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/text-interpolation`
2024-09-26T12:18:57.443897Z  INFO dora_coordinator: successfully retrieved logs for `01922e43-ba25-7988-9363-e5f3ef778a2a/text-interpolation`
2024-09-26T12:20:11.143273Z  INFO dora_coordinator: successfully send stop dataflow `01922e43-ba25-7988-9363-e5f3ef778a2a` to all daemons
2024-09-27T02:04:38.343380Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923139-1843-7ca8-896a-38299ea66882`
2024-09-27T02:04:54.074954Z  INFO dora_coordinator: successfully send stop dataflow `01923139-1843-7ca8-896a-38299ea66882` to all daemons
2024-09-27T02:04:57.663928Z  INFO dora_coordinator: successfully send stop dataflow `01923139-1843-7ca8-896a-38299ea66882` to all daemons
2024-09-27T02:05:09.155524Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T02:05:22.737969Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923139-c5ae-7302-98bf-b0420eb8e7dd`
2024-09-27T02:05:56.484272Z  INFO dora_coordinator: successfully retrieved logs for `01923139-c5ae-7302-98bf-b0420eb8e7dd/text-interpolation`
2024-09-27T02:05:58.060136Z  INFO dora_coordinator: successfully retrieved logs for `01923139-c5ae-7302-98bf-b0420eb8e7dd/text-interpolation`
2024-09-27T03:27:33.860348Z  INFO dora_coordinator: successfully retrieved logs for `01923139-c5ae-7302-98bf-b0420eb8e7dd/text-interpolation`
2024-09-27T03:30:43.254453Z  INFO dora_coordinator: successfully send stop dataflow `01923139-c5ae-7302-98bf-b0420eb8e7dd` to all daemons
2024-09-27T03:30:47.216280Z  INFO dora_coordinator: successfully retrieved logs for `01923139-c5ae-7302-98bf-b0420eb8e7dd/text-interpolation`
2024-09-27T03:31:15.003658Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923188-63b7-79d6-aca2-707433f41e16`
2024-09-27T03:31:22.331033Z  INFO dora_coordinator: successfully retrieved logs for `01923188-63b7-79d6-aca2-707433f41e16/text-interpolation`
2024-09-27T06:59:15.094888Z  INFO dora_coordinator: successfully send stop dataflow `01923188-63b7-79d6-aca2-707433f41e16` to all daemons
2024-09-27T06:59:30.174074Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T07:02:26.953529Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("text") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("ground_truth"): Input { mapping: User(UserInputMapping { source: NodeId("key-interpolation"), output: DataId("text") }), queue_size: None }, DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }}, outputs: {DataId("text")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923249-bf84-71f0-a8b7-571acac8d5ea`
2024-09-27T07:05:54.147935Z  INFO dora_coordinator: successfully retrieved logs for `01923249-bf84-71f0-a8b7-571acac8d5ea/dora-qwenvl`
2024-09-27T07:16:57.638629Z  INFO dora_coordinator: successfully send stop dataflow `01923249-bf84-71f0-a8b7-571acac8d5ea` to all daemons
2024-09-27T07:17:12.724500Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T07:17:37.690912Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923257-a516-7df0-b1b9-76f148a7e300`
2024-09-27T07:17:43.620242Z  INFO dora_coordinator: successfully retrieved logs for `01923249-bf84-71f0-a8b7-571acac8d5ea/dora-qwenvl`
2024-09-27T07:18:13.811113Z  INFO dora_coordinator: successfully retrieved logs for `01923257-a516-7df0-b1b9-76f148a7e300/text-interpolation`
2024-09-27T07:18:49.327257Z  INFO dora_coordinator: successfully retrieved logs for `01923257-a516-7df0-b1b9-76f148a7e300/text-interpolation`
2024-09-27T07:19:51.157491Z  INFO dora_coordinator: successfully retrieved logs for `01923257-a516-7df0-b1b9-76f148a7e300/text-interpolation`
2024-09-27T07:20:00.158596Z  INFO dora_coordinator: successfully send stop dataflow `01923257-a516-7df0-b1b9-76f148a7e300` to all daemons
2024-09-27T07:20:15.256262Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T07:20:17.424011Z  INFO dora_coordinator: Received destroy command
2024-09-27T07:20:17.424819Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-09-27T07:20:17.424948Z  INFO dora_coordinator: stopped
2024-09-27T07:20:25.563147Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0192325a-34d7-77ba-90ba-557947e6ba50`
2024-09-27T07:20:33.806825Z  INFO dora_coordinator: successfully retrieved logs for `0192325a-34d7-77ba-90ba-557947e6ba50/text-interpolation`
2024-09-27T07:20:43.115135Z  INFO dora_coordinator: successfully retrieved logs for `0192325a-34d7-77ba-90ba-557947e6ba50/text-interpolation`
2024-09-27T07:22:04.374860Z  INFO dora_coordinator: successfully send stop dataflow `0192325a-34d7-77ba-90ba-557947e6ba50` to all daemons
2024-09-27T07:22:19.667074Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T07:22:22.207973Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0192325b-fc7c-7f9a-a9ed-c4c7dda43865`
2024-09-27T07:22:55.999856Z  INFO dora_coordinator: successfully retrieved logs for `0192325b-fc7c-7f9a-a9ed-c4c7dda43865/text-interpolation`
2024-09-27T07:23:31.215524Z  INFO dora_coordinator: successfully retrieved logs for `0192325b-fc7c-7f9a-a9ed-c4c7dda43865/text-interpolation`
2024-09-27T07:26:33.894672Z  INFO dora_coordinator: successfully send stop dataflow `0192325b-fc7c-7f9a-a9ed-c4c7dda43865` to all daemons
2024-09-27T07:26:48.379881Z  INFO dora_coordinator: Received destroy command
2024-09-27T07:26:48.380598Z  INFO dora_coordinator: successfully send stop dataflow `0192325b-fc7c-7f9a-a9ed-c4c7dda43865` to all daemons
2024-09-27T07:26:48.381226Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-09-27T07:26:48.381361Z  INFO dora_coordinator: stopped
2024-09-27T07:26:48.381458Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T07:26:53.808542Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923260-216c-79b4-a7ef-8cb2688debbb`
2024-09-27T07:28:25.406978Z  INFO dora_coordinator: successfully send stop dataflow `01923260-216c-79b4-a7ef-8cb2688debbb` to all daemons
2024-09-27T07:28:40.625386Z ERROR dora_coordinator::control: failed to send reply
2024-09-27T07:29:12.544224Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923262-3f5c-7526-aa73-7ddea1976e59`
2024-09-27T07:29:28.195886Z  INFO dora_coordinator: successfully retrieved logs for `01923262-3f5c-7526-aa73-7ddea1976e59/text-interpolation`
2024-09-27T08:13:09.754652Z  INFO dora_coordinator: successfully send stop dataflow `01923262-3f5c-7526-aa73-7ddea1976e59` to all daemons
2024-09-27T08:13:24.844939Z ERROR dora_coordinator::control: failed to send reply
2024-09-28T01:40:48.044403Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `01923649-a128-73cd-8325-c321e0b95d0d`
2024-09-28T01:40:52.947345Z  INFO dora_coordinator: successfully retrieved logs for `01923649-a128-73cd-8325-c321e0b95d0d/text-interpolation`
2024-09-28T01:40:54.266934Z  INFO dora_coordinator: successfully retrieved logs for `01923649-a128-73cd-8325-c321e0b95d0d/text-interpolation`
2024-09-28T01:41:02.523271Z  INFO dora_coordinator: successfully retrieved logs for `01923649-a128-73cd-8325-c321e0b95d0d/text-interpolation`
2024-09-28T01:42:08.536655Z  INFO dora_coordinator: successfully retrieved logs for `01923649-a128-73cd-8325-c321e0b95d0d/mickrobot_chassis`
2024-09-28T01:45:27.382358Z  INFO dora_coordinator: successfully send stop dataflow `01923649-a128-73cd-8325-c321e0b95d0d` to all daemons
2024-09-28T01:45:42.203175Z  INFO dora_coordinator: successfully send stop dataflow `01923649-a128-73cd-8325-c321e0b95d0d` to all daemons
2024-09-28T01:45:42.476459Z ERROR dora_coordinator::control: failed to send reply
2024-09-28T01:45:45.113719Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0192364e-2996-7082-b4a0-fc9ea3e70828`
2024-09-28T01:47:12.638587Z  INFO dora_coordinator: successfully send stop dataflow `0192364e-2996-7082-b4a0-fc9ea3e70828` to all daemons
2024-09-28T01:47:22.875081Z  INFO dora_coordinator: successfully send stop dataflow `0192364e-2996-7082-b4a0-fc9ea3e70828` to all daemons
2024-09-28T01:47:27.725310Z ERROR dora_coordinator::control: failed to send reply
2024-09-28T01:47:36.260248Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("mickrobot_chassis"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("build/mickrobotx4"), args: None, build: None, send_stdout_as: None, inputs: {DataId("CmdVelTwist"): Input { mapping: User(UserInputMapping { source: NodeId("text-interpolation"), output: DataId("CmdVelTwist") }), queue_size: None }}, outputs: {DataId("Odometry")} }, Node { id: NodeId("keyboard-listener"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-keyboard"), args: None, build: Some("pip install dora-keyboard"), send_stdout_as: None, inputs: {}, outputs: {DataId("char")} }, Node { id: NodeId("key-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("key_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("keyboard"): Input { mapping: User(UserInputMapping { source: NodeId("keyboard-listener"), output: DataId("char") }), queue_size: None }}, outputs: {DataId("text")} }, Node { id: NodeId("text-interpolation"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("text_interpolation.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("text"): Input { mapping: User(UserInputMapping { source: NodeId("dora-qwenvl"), output: DataId("tick") }), queue_size: None }}, outputs: {DataId("CmdVelTwist")} }, Node { id: NodeId("camera"), name: None, description: None, env: Some({"CAPTURE_PATH": Integer(2), "IMAGE_HEIGHT": Integer(480), "IMAGE_WIDTH": Integer(640)}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("opencv-video-capture"), args: None, build: Some("pip install opencv-video-capture"), send_stdout_as: None, inputs: {DataId("tick"): Input { mapping: Timer { interval: 16ms }, queue_size: None }}, outputs: {DataId("image")} }, Node { id: NodeId("plot"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "plot_image_only.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("dora-qwenvl"), name: None, description: None, env: Some({"CUSTOM_MODEL_PATH": String("/home/crp/dora_project/LLaMA-Factory/saves/qwen2_vl-7b/lora/sft"), "DEFAULT_QUESTION": String("Respond with right, left, forward, backward, open, or close to move to objective")}), deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dora-qwenvl"), args: None, build: Some("pip install /home/crp/dora/node-hub/dora-qwenvl"), send_stdout_as: None, inputs: {DataId("image"): Input { mapping: User(UserInputMapping { source: NodeId("camera"), output: DataId("image") }), queue_size: Some(1) }, DataId("tick"): Input { mapping: Timer { interval: 500ms }, queue_size: None }}, outputs: {DataId("tick")} }] } working_dir="/home/crp/dora_project/dora_mickrobot"}: dora_coordinator::run: successfully spawned dataflow `0192364f-dbc1-73f6-a7d8-1d613d566a52`
2024-09-28T13:53:26.602645Z  INFO dora_coordinator: successfully send stop dataflow `0192364f-dbc1-73f6-a7d8-1d613d566a52` to all daemons
2024-09-28T13:53:41.687386Z ERROR dora_coordinator::control: failed to send reply
